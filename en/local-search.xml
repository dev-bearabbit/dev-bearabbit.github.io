<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Avoid a Cost Explosion with AWS Personalize</title>
    <link href="/en/en/Lesson/lesson-0/"/>
    <url>/en/en/Lesson/lesson-0/</url>
    
    <content type="html"><![CDATA[<p>In this post, I’ll share how I unexpectedly faced a cost explosion while using AWS Personalize. Hopefully, my experience can help others avoid similar pitfalls in SaaS cost management.</p><span id="more"></span><hr><h2 id="The-Incident"><a href="#The-Incident" class="headerlink" title="The Incident"></a>The Incident</h2><p>I was developing and testing a tool for extracting CRM campaign audiences. As part of this process, I compared AWS Personalize pricing, estimated the expected costs, and documented everything in a Confluence file to present to my lead. After approval, we moved forward with A&#x2F;B testing between our current method and the model output. For context, I used the <code>aws-item-affinity</code> recipe for item-user segmentation.</p><p>However, this morning, I received an alert about a sudden surge in Personalize costs. According to my calculations, the expenses should have been minimal. What went wrong? My spine chilled as I felt something was terribly off. Feeling a wave of panic, I immediately began investigating.</p><p><img src="/en/images/0.png" alt="What’s going on"></p><p>I spent the entire morning staring at the <a href="https://aws.amazon.com/personalize/pricing/">AWS Personalize pricing page</a> and recalculating costs based on usage. Finally, I identified the issue.</p><h2 id="Root-Cause"><a href="#Root-Cause" class="headerlink" title="Root Cause"></a>Root Cause</h2><p>The culprit was the batch segment job. While the dataset and training costs were minimal since they involved one-time charges, the batch segment cost was the bombshell. Let’s take a look at the pricing details from AWS’s official page.</p><p><img src="/en/images/1.png" alt="Pricing table for batch segment"></p><p>The table above outlines how batch segment costs are calculated. Here’s where I misunderstood: I assumed the term Users in dataset referred to the number of users requested per segment. That is, for up to 100,000 requests, the cost would be <code>$0.016</code> per segment request, and for 100,001–900,000 requests, the cost would drop to <code>$0.008</code>. Based on this, I calculated the cost for retrieving 10,000 users for each of 10 items like this:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-number">10000</span>/<span class="hljs-number">1000</span> * <span class="hljs-number">0.016</span> * <span class="hljs-number">10</span><br></code></pre></td></tr></table></figure><p>However, <code>Users in dataset</code> actually refers to <code>Total Users in the Dataset</code>—the total number of users in the training dataset—irrespective of the number of users requested in the segment job. Since I trained the model on a year’s worth of data, the dataset contained approximately 600,000 users. The correct calculation, then, is:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">Tier_1 = <span class="hljs-number">100000</span>/<span class="hljs-number">1000</span> * <span class="hljs-number">0.016</span> * <span class="hljs-number">10</span><br>Tier_2 = <span class="hljs-number">500000</span>/<span class="hljs-number">1000</span> * <span class="hljs-number">0.008</span> * <span class="hljs-number">10</span><br></code></pre></td></tr></table></figure><p>In my initial understanding, the cost would have been just <code>$1.6</code>, but the actual cost came to <code>$56</code>. This was entirely my mistake for not double-checking the details. Looking back, I should have questioned why the costs seemed so low and revisited the documentation for clarity. At the same time, I can’t help but feel like AWS’s pricing table is designed to be confusing—it never crossed my mind that the requested number of users wouldn’t factor into the calculation at all.</p><p><img src="/en/images/2.png" alt="Plz undo everything"></p><p>If you miscalculate the cost of using SaaS in the cloud ecosystem, you’ll end up paying a lot of unnecessary money, even if your app works.<br>I wrote my first postmortem documentation as a developer because of this cost. I felt sad because I made a mistake I didn’t expect.<br>For anyone confused like me when calculating costs, I’m leaving this on my blog.</p><h2 id="Lessons-Learned"><a href="#Lessons-Learned" class="headerlink" title="Lessons Learned"></a>Lessons Learned</h2><ul><li>Cloud costs are seriously scary. Sometimes, I wonder if server crashes would be stressful… Actually, no—that’s a nightmare too.</li><li>Always read AWS documentation carefully and double-check with others to avoid misunderstandings.</li><li>For AWS Personalize, pay close attention to segment costs. The size of the training dataset directly affects batch segment charges.</li></ul>]]></content>
    
    
    <categories>
      
      <category>etc.</category>
      
      <category>lessons</category>
      
    </categories>
    
    
    <tags>
      
      <tag>aws</tag>
      
      <tag>personalize</tag>
      
      <tag>pricing</tag>
      
      <tag>mistake</tag>
      
      <tag>aws-item-affinity</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Customizing Hexo for a Multilingual Blog</title>
    <link href="/en/en/AboutHexo/about-hexo-0/"/>
    <url>/en/en/AboutHexo/about-hexo-0/</url>
    
    <content type="html"><![CDATA[<p>Here’s how to customize your Hexo blog to support multiple languages.</p><span id="more"></span><hr><h2 id="Current-Status"><a href="#Current-Status" class="headerlink" title="Current Status"></a>Current Status</h2><p>Here’s the current state of my technical blog:</p><ul><li>Hexo with the Fluid theme is being used.</li><li>The Fluid theme does not natively support multiple languages.</li><li>Custom development is needed to enable multilingual functionality.</li></ul><h2 id="Customization-Requirements"><a href="#Customization-Requirements" class="headerlink" title="Customization Requirements"></a>Customization Requirements</h2><p>The customization requirements were as follows:</p><ul><li>The root URL should serve the Korean version, and the English version should be redirected to the &#x2F;en&#x2F; path.</li><li>Posts should be written independently for each language, with categories and tags tailored to the specific language.</li><li>A language selection dropdown should be added to the navbar, allowing users to switch languages.</li></ul><h2 id="Customization-Setup"><a href="#Customization-Setup" class="headerlink" title="Customization Setup"></a>Customization Setup</h2><p>The customization process was straightforward: create <strong>two separate Hexo blogs</strong> using the same theme and modify only the navbar.<br>To meet the requirements, the blog deployment and source code folders were structured as follows:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">drwxr-xr-x  18 ryu  staff   576  1  2 06:33 deploy<br>drwxr-xr-x  13 ryu  staff   416  1  2 05:22 en-blog<br>drwxr-xr-x  11 ryu  staff   352  1  3 01:47 ko-blog<br></code></pre></td></tr></table></figure><ul><li><code>en-blog</code>: Source code for the English blog</li><li><code>ko-blog</code>: Source code for the Korean blog</li><li><code>deploy</code>: Final folder containing files ready for deployment</li></ul><p>If you’re starting from scratch, create the blog source folders using the following commands:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo init ko-blog<br>hexo init en-blog<br></code></pre></td></tr></table></figure><p>Then navigate to each folder, download the desired theme, and set the default configuration separately.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># Korean version</span><br><span class="hljs-built_in">cd</span> ko-blog<br>npm install --save hexo-theme-fluid<br><br><span class="hljs-comment"># English version</span><br><span class="hljs-built_in">cd</span> en-blog<br>npm install --save hexo-theme-fluid<br></code></pre></td></tr></table></figure><p>Since I planned to use the Korean version as the root URL, I configured the <code>_config.yml</code> files as follows:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># Korean version: /ko-blog/_config.yml</span><br>language: ko<br>url: https://dev-bearabbit.github.io<br>root: /<br>permalink: :lang/:title/<br><br><span class="hljs-comment"># English version: /en-blog/_config.yml</span><br>language: en<br>root: /en/<br>permalink: :lang/:title/<br></code></pre></td></tr></table></figure><p>This configuration adds the lang parameter to the permalink, so it’s essential to include lang in each post. To simplify this, I modified the default post scaffolds for each blog:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># Korean version: /ko-blog/scaffolds/post.md</span><br>---<br>title: &#123;&#123; title &#125;&#125;<br>lang: ko<br><span class="hljs-built_in">date</span>: &#123;&#123; <span class="hljs-built_in">date</span> &#125;&#125;<br>tags:<br>categories:<br>---<br><br><span class="hljs-comment"># English version: /en-blog/scaffolds/post.md</span><br>---<br>title: &#123;&#123; title &#125;&#125;<br>lang: en<br><span class="hljs-built_in">date</span>: &#123;&#123; <span class="hljs-built_in">date</span> &#125;&#125;<br>tags:<br>categories:<br>---<br></code></pre></td></tr></table></figure><p>Next, I added a language selection dropdown to the navbar by editing the theme’s navigation files. In the Fluid theme, this can be done in <code>layout/_partials/header/navigation.ejs</code>.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- Korean version: /ko-blog/themes/fluid/layout/_partials/header/navigation.ejs --&gt;</span><br><span class="hljs-comment">&lt;!-- English version: /en-blog/themes/fluid/layout/_partials/header/navigation.ejs --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;dropdown-menu&quot;</span> <span class="hljs-attr">aria-labelledby</span>=<span class="hljs-string">&quot;languageDropdown&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;dropdown-item&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/&quot;</span>&gt;</span>한국어<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;dropdown-item&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/en/&quot;</span>&gt;</span>English<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>To display the selected language in the navbar, I added the following script:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;DOMContentLoaded&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> path = <span class="hljs-variable language_">window</span>.<span class="hljs-property">location</span>.<span class="hljs-property">pathname</span>;</span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> currentLang = path.<span class="hljs-title function_">startsWith</span>(<span class="hljs-string">&#x27;/en/&#x27;</span>) ? <span class="hljs-string">&#x27;English&#x27;</span> : <span class="hljs-string">&#x27;한국어&#x27;</span>;</span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> currentLangElement = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;current-lang&#x27;</span>);</span><br><span class="language-javascript">    currentLangElement.<span class="hljs-property">textContent</span> = currentLang;</span><br><span class="language-javascript">  &#125;);</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>Finally, I updated the <code>head.ejs</code> file to include alternate language links:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- Korean version: /ko-blog/themes/fluid/layout/_partials/head.ejs --&gt;</span><br><span class="hljs-comment">&lt;!-- English version: /en-blog/themes/fluid/layout/_partials/head.ejs --&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;alternate&quot;</span> <span class="hljs-attr">hreflang</span>=<span class="hljs-string">&quot;ko&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://dev-bearabbit.github.io/&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;alternate&quot;</span> <span class="hljs-attr">hreflang</span>=<span class="hljs-string">&quot;en&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://dev-bearabbit.github.io/en/&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><p>With these changes, the customization is complete.</p><h2 id="Deploying-the-Blog"><a href="#Deploying-the-Blog" class="headerlink" title="Deploying the Blog"></a>Deploying the Blog</h2><p>The blog is deployed using GitHub Pages. First, generate the deployment files for both blogs:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># Korean version: ko-blog</span><br><span class="hljs-comment"># English version: en-blog</span><br>hexo clean<br>hexo generate<br></code></pre></td></tr></table></figure><p>The generated files will be located in the following directories:</p><ul><li>Korean version: ko-blog&#x2F;public&#x2F;</li><li>English version: en-blog&#x2F;public&#x2F;</li></ul><p>Move the files into the <code>deploy</code> folder. Ensure the Korean version is moved to the root of <code>deploy</code>, while the English version is moved to <code>deploy/en/</code>.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">rm</span> -rf deploy/*<br><br><span class="hljs-built_in">mv</span> ko-blog/public/* deploy/<br><span class="hljs-built_in">mkdir</span> -p deploy/en/ &amp;&amp; <span class="hljs-built_in">mv</span> en-blog/public/* deploy/en/<br></code></pre></td></tr></table></figure><p>Finally, deploy the contents of the deploy folder to GitHub.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># Initial setup</span><br><span class="hljs-built_in">cd</span> deploy<br>git init<br>git remote add origin https://github.com/&lt;username&gt;/&lt;repository&gt;.git<br><br><span class="hljs-comment"># Push changes</span><br>git add .<br>git commit -m <span class="hljs-string">&quot;Deploy folder initial commit&quot;</span><br>git push origin main<br></code></pre></td></tr></table></figure><p>This completes the setup for a multilingual Hexo blog.</p>]]></content>
    
    
    <categories>
      
      <category>etc.</category>
      
      <category>about hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>blog</tag>
      
      <tag>multilingual</tag>
      
      <tag>custom</tag>
      
      <tag>English blog</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
