<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Customizing Hexo for a Multilingual Blog</title>
    <link href="/en/en/AboutHexo/about-hexo-0/"/>
    <url>/en/en/AboutHexo/about-hexo-0/</url>
    
    <content type="html"><![CDATA[<p>Here’s how to customize your Hexo blog to support multiple languages.</p><span id="more"></span><hr><h2 id="Current-Status"><a href="#Current-Status" class="headerlink" title="Current Status"></a>Current Status</h2><p>Here’s the current state of my technical blog:</p><ul><li>Hexo with the Fluid theme is being used.</li><li>The Fluid theme does not natively support multiple languages.</li><li>Custom development is needed to enable multilingual functionality.</li></ul><h2 id="Customization-Requirements"><a href="#Customization-Requirements" class="headerlink" title="Customization Requirements"></a>Customization Requirements</h2><p>The customization requirements were as follows:</p><ul><li>The root URL should serve the Korean version, and the English version should be redirected to the &#x2F;en&#x2F; path.</li><li>Posts should be written independently for each language, with categories and tags tailored to the specific language.</li><li>A language selection dropdown should be added to the navbar, allowing users to switch languages.</li></ul><h2 id="Customization-Setup"><a href="#Customization-Setup" class="headerlink" title="Customization Setup"></a>Customization Setup</h2><p>The customization process was straightforward: create <strong>two separate Hexo blogs</strong> using the same theme and modify only the navbar.<br>To meet the requirements, the blog deployment and source code folders were structured as follows:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">drwxr-xr-x  18 ryu  staff   576  1  2 06:33 deploy<br>drwxr-xr-x  13 ryu  staff   416  1  2 05:22 en-blog<br>drwxr-xr-x  11 ryu  staff   352  1  3 01:47 ko-blog<br></code></pre></td></tr></table></figure><ul><li><code>en-blog</code>: Source code for the English blog</li><li><code>ko-blog</code>: Source code for the Korean blog</li><li><code>deploy</code>: Final folder containing files ready for deployment</li></ul><p>If you’re starting from scratch, create the blog source folders using the following commands:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo init ko-blog<br>hexo init en-blog<br></code></pre></td></tr></table></figure><p>Then navigate to each folder, download the desired theme, and set the default configuration separately.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># Korean version</span><br><span class="hljs-built_in">cd</span> ko-blog<br>npm install --save hexo-theme-fluid<br><br><span class="hljs-comment"># English version</span><br><span class="hljs-built_in">cd</span> en-blog<br>npm install --save hexo-theme-fluid<br></code></pre></td></tr></table></figure><p>Since I planned to use the Korean version as the root URL, I configured the <code>_config.yml</code> files as follows:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># Korean version: /ko-blog/_config.yml</span><br>language: ko<br>url: https://dev-bearabbit.github.io<br>root: /<br>permalink: :lang/:title/<br><br><span class="hljs-comment"># English version: /en-blog/_config.yml</span><br>language: en<br>root: /en/<br>permalink: :lang/:title/<br></code></pre></td></tr></table></figure><p>This configuration adds the lang parameter to the permalink, so it’s essential to include lang in each post. To simplify this, I modified the default post scaffolds for each blog:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># Korean version: /ko-blog/scaffolds/post.md</span><br>---<br>title: &#123;&#123; title &#125;&#125;<br>lang: ko<br><span class="hljs-built_in">date</span>: &#123;&#123; <span class="hljs-built_in">date</span> &#125;&#125;<br>tags:<br>categories:<br>---<br><br><span class="hljs-comment"># English version: /en-blog/scaffolds/post.md</span><br>---<br>title: &#123;&#123; title &#125;&#125;<br>lang: en<br><span class="hljs-built_in">date</span>: &#123;&#123; <span class="hljs-built_in">date</span> &#125;&#125;<br>tags:<br>categories:<br>---<br></code></pre></td></tr></table></figure><p>Next, I added a language selection dropdown to the navbar by editing the theme’s navigation files. In the Fluid theme, this can be done in <code>layout/_partials/header/navigation.ejs</code>.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- Korean version: /ko-blog/themes/fluid/layout/_partials/header/navigation.ejs --&gt;</span><br><span class="hljs-comment">&lt;!-- English version: /en-blog/themes/fluid/layout/_partials/header/navigation.ejs --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;dropdown-menu&quot;</span> <span class="hljs-attr">aria-labelledby</span>=<span class="hljs-string">&quot;languageDropdown&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;dropdown-item&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/&quot;</span>&gt;</span>한국어<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;dropdown-item&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/en/&quot;</span>&gt;</span>English<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>To display the selected language in the navbar, I added the following script:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;DOMContentLoaded&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> path = <span class="hljs-variable language_">window</span>.<span class="hljs-property">location</span>.<span class="hljs-property">pathname</span>;</span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> currentLang = path.<span class="hljs-title function_">startsWith</span>(<span class="hljs-string">&#x27;/en/&#x27;</span>) ? <span class="hljs-string">&#x27;English&#x27;</span> : <span class="hljs-string">&#x27;한국어&#x27;</span>;</span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> currentLangElement = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;current-lang&#x27;</span>);</span><br><span class="language-javascript">    currentLangElement.<span class="hljs-property">textContent</span> = currentLang;</span><br><span class="language-javascript">  &#125;);</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>Finally, I updated the <code>head.ejs</code> file to include alternate language links:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- Korean version: /ko-blog/themes/fluid/layout/_partials/head.ejs --&gt;</span><br><span class="hljs-comment">&lt;!-- English version: /en-blog/themes/fluid/layout/_partials/head.ejs --&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;alternate&quot;</span> <span class="hljs-attr">hreflang</span>=<span class="hljs-string">&quot;ko&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://dev-bearabbit.github.io/&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;alternate&quot;</span> <span class="hljs-attr">hreflang</span>=<span class="hljs-string">&quot;en&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://dev-bearabbit.github.io/en/&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><p>With these changes, the customization is complete.</p><h2 id="Deploying-the-Blog"><a href="#Deploying-the-Blog" class="headerlink" title="Deploying the Blog"></a>Deploying the Blog</h2><p>The blog is deployed using GitHub Pages. First, generate the deployment files for both blogs:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># Korean version: ko-blog</span><br><span class="hljs-comment"># English version: en-blog</span><br>hexo clean<br>hexo generate<br></code></pre></td></tr></table></figure><p>The generated files will be located in the following directories:</p><ul><li>Korean version: ko-blog&#x2F;public&#x2F;</li><li>English version: en-blog&#x2F;public&#x2F;</li></ul><p>Move the files into the <code>deploy</code> folder. Ensure the Korean version is moved to the root of <code>deploy</code>, while the English version is moved to <code>deploy/en/</code>.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">rm</span> -rf deploy/*<br><br><span class="hljs-built_in">mv</span> ko-blog/public/* deploy/<br><span class="hljs-built_in">mkdir</span> -p deploy/en/ &amp;&amp; <span class="hljs-built_in">mv</span> en-blog/public/* deploy/en/<br></code></pre></td></tr></table></figure><p>Finally, deploy the contents of the deploy folder to GitHub.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># Initial setup</span><br><span class="hljs-built_in">cd</span> deploy<br>git init<br>git remote add origin https://github.com/&lt;username&gt;/&lt;repository&gt;.git<br><br><span class="hljs-comment"># Push changes</span><br>git add .<br>git commit -m <span class="hljs-string">&quot;Deploy folder initial commit&quot;</span><br>git push origin main<br></code></pre></td></tr></table></figure><p>This completes the setup for a multilingual Hexo blog.</p>]]></content>
    
    
    <categories>
      
      <category>etc.</category>
      
      <category>about hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>blog</tag>
      
      <tag>multilingual</tag>
      
      <tag>custom</tag>
      
      <tag>English blog</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Test</title>
    <link href="/en/en/AboutHexo/about_hexo-0/"/>
    <url>/en/en/AboutHexo/about_hexo-0/</url>
    
    <content type="html"><![CDATA[<p>Hexo 블로그를 만들기 위해서는 Github계정을 사용하는 것이 가장 편합니다. Github계정이 없는 분들은 <a href="https://github.com/">Github</a>에서 만들어 주세요! Github계정이 있는 분들이라면 바로 Hexo 블로그를 만들 수 있습니다</p><span id="more"></span><hr><p>Hexo 블로그를 만들기 위해서는 크게 2가지의 과정이 필요하다.</p><h2 id="Github-repository-만들기"><a href="#Github-repository-만들기" class="headerlink" title="Github repository 만들기"></a>Github repository 만들기</h2><p>Github repository 만드는 방법은 다음과 같다.</p><ul><li><p>Github계정에 들어가면 상단바에서 <code>Repositories</code>를 클릭한 후, <code>New</code>를 누른다.</p></li><li><p>그 다음 <code>Repository name</code>에 <code>사용자이름.github.io</code>로 작성하고, <code>Public 모드</code>으로 설정한 다음 <code>create repository</code>를 누른다.</p></li><li><p><code>repository</code>생성이 완료되면, 터미널을 켜서 원하는 디렉토리에 아래의 코드를 입력한다.</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/사용자이름/사용자이름.github.io<br></code></pre></td></tr></table></figure></li><li><p>디렉토리를 설정하는 방법은 터미널에 <code>pwd</code>를 입력하여 현재 위치를 파악하고, <code>cd 이동하려는 위치 이름</code>을 입력하여 이동하면 된다. (Mac 기준)</p></li><li><p>해당 디렉토리에 <code>사용자이름.github.io</code> 파일이 생성되었다면, 아래의 코드를 입력한다.</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> 사용자이름.github.io<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Hello World&quot;</span> &gt; index.html<br>git add --all<br>git commit -m <span class="hljs-string">&quot;Initial commit&quot;</span><br>git push -u origin master<br></code></pre></td></tr></table></figure></li></ul><p>완성되었다! 마지막으로 브라우저에서 <code>https://USERNAME.github.io</code>에 접속되는지 확인해보자.</p><h2 id="Hexo-만들기"><a href="#Hexo-만들기" class="headerlink" title="Hexo 만들기"></a>Hexo 만들기</h2><p>Hexo 셋팅을 하는 것은 몇 줄의 코드면 끝난다. 이제부터 아래의 코드를 순서대로 입력한다.</p><h3 id="설치-전-준비해야-할-것"><a href="#설치-전-준비해야-할-것" class="headerlink" title="설치 전 준비해야 할 것"></a>설치 전 준비해야 할 것</h3><p>Hexo를 설치하기 전에 아래의 요소들을 다운로드 해야 한다. 이미 다운되어 있다면 다시 받을 필요는 없다.<br><a href="https://nodejs.org/en/">Node.js</a><br><a href="https://git-scm.com/">Git</a></p><h3 id="Hexo-설치-코드"><a href="#Hexo-설치-코드" class="headerlink" title="Hexo 설치 코드"></a>Hexo 설치 코드</h3><p>설치를 시작하기에 앞서 터미널에서 Hexo파일을 저장할 디렉토리를 먼저 설정해야 한다.<br>디렉토리를 설정하는 방법은 <code>Github repository 만들기</code>에 있다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install hexo-cli -g<br>hexo init myBlog <span class="hljs-comment">#`myBlog`라는 파일을 만들기</span><br><span class="hljs-built_in">cd</span> myBlog <span class="hljs-comment">#myBlog로 디렉토리 설정</span><br>npm install<br></code></pre></td></tr></table></figure><p>설치가 완료되었다.</p><h3 id="블로그-기본-설정"><a href="#블로그-기본-설정" class="headerlink" title="블로그 기본 설정"></a>블로그 기본 설정</h3><p>Hexo를 설치하면서 생성한 폴더를 오픈한다. 그 다음 블로그의 기본적인 설정을 바꾸기 위해서 <code>_config.yml</code>를 열어준다.<br>텍스트 파일로 오픈해도 되지만 개인적으로는 <a href="https://code.visualstudio.com/">Visual studio code</a>을 사용하였다.<br>해당 파일에서 아래와 같은 부분을 수정하고 저장하면 된다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># site 정보 수정</span><br>title: DEV AnythinG <span class="hljs-comment"># 블로그 이름</span><br>subtitle:<br>description:<br>author: Hyeonji Ryu <span class="hljs-comment"># 사용자 이름</span><br><br><span class="hljs-comment"># URL 정보 수정</span><br>url: https://사용자이름.github.io <span class="hljs-comment"># 이 부분 수정</span><br>root: /<br>permalink: :year/:month/:day/:title/<br>permalink_defaults:<br><br><span class="hljs-comment"># Deployment</span><br>deploy:<br>  <span class="hljs-built_in">type</span>: git<br>  repo: https://github.com/사용자이름/사용자이름.github.io.git<br></code></pre></td></tr></table></figure><h3 id="테스트-및-배포하기"><a href="#테스트-및-배포하기" class="headerlink" title="테스트 및 배포하기"></a>테스트 및 배포하기</h3><p>테스트를 위해서 터미널에 아래의 코드를 입력해보자.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 테스트</span><br>hexo server<br></code></pre></td></tr></table></figure><p>서버가 작동된 후에는 <code>http://localhost:4000</code>에서 변경사항이 적용된 블로그를 미리 볼 수 있다.<br>테스트 완료 후 Github repository에서 배포하면 블로그가 완성된다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 해당 리소스 생성</span><br>hexo generate<br><br><span class="hljs-comment"># 배포하기</span><br>hexo deploy<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>etc.</category>
      
      <category>about hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>blog</tag>
      
      <tag>Github</tag>
      
      <tag>헥소</tag>
      
      <tag>깃허브</tag>
      
      <tag>블로그</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
